import random

# The possible ranks of a card
ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

# The possible suits of a card
suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']

# A class to represent a card
class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
    
    def __repr__(self):
        return f"{self.rank} of {self.suit}"

# A class to represent a deck of cards
class Deck:
    def __init__(self):
        self.cards = [Card(rank, suit) for rank in ranks for suit in suits]
        self.shuffle()
    
    def shuffle(self):
        random.shuffle(self.cards)
    
    def deal(self):
        return self.cards.pop()

# A class to represent a poker hand
class Hand:
    def __init__(self, cards):
        self.cards = cards
        self.rank_counts = self.count_ranks()
        self.suit_counts = self.count_suits()
    
    def count_ranks(self):
        counts = {rank: 0 for rank in ranks}
        for card in self.cards:
            counts[card.rank] += 1
        return counts
    
    def count_suits(self):
        counts = {suit: 0 for suit in suits}
        for card in self.cards:
            counts[card.suit] += 1
        return counts
    
    def has_pair(self):
        return max(self.rank_counts.values()) >= 2
    
    def has_two_pair(self):
        return sorted(self.rank_counts.values())[-2:] == [2, 2]
    
    def has_three_of_a_kind(self):
        return max(self.rank_counts.values()) >= 3
    
    def has_four_of_a_kind(self):
        return max(self.rank_counts.values()) >= 4
    
    def has_full_house(self):
        return self.has_pair() and self.has_three_of_a_kind()
    
    def has_flush(self):
       
